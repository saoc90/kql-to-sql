@page "/"
@using DuckDbDemo.DuckDB
@using DuckDbDemo.Services
@using System.Text.Json
@using KqlToSql
@using Microsoft.JSInterop
@inject IJSRuntime JSRuntime
@implements IDisposable

<PageTitle>KQL to SQL Converter</PageTitle>

<MudContainer MaxWidth="MaxWidth.ExtraLarge">
    <MudText Typo="Typo.h3" Class="mb-4">
        <MudIcon Icon="Icons.Material.Filled.Transform" Class="mr-2" />
        KQL to SQL Query Editor
    </MudText>
    
    <MudText Typo="Typo.body1" Class="mb-6 mud-text-secondary">
        Convert Kusto Query Language (KQL) to SQL and execute queries against your data using DuckDB.
    </MudText>

    <MudPaper Class="pa-6" Elevation="2">
        <div class="d-flex justify-space-between align-center mb-4">
            <MudText Typo="Typo.h5">Query Workspace</MudText>
            
            <div class="d-flex align-center gap-4">
                <MudButton Variant="Variant.Text" 
                           Color="Color.Secondary"
                           Size="Size.Small"
                           StartIcon="Icons.Material.Filled.Build"
                           OnClick="InitializeEditor">
                    Debug: Init Editor
                </MudButton>
                
                <MudToggleGroup T="string" Value="@selectedMode" ValueChanged="OnModeChanged" Color="Color.Primary" CheckMark>
                    <MudToggleItem T="string" Value="@("kql")" Text="KQL" />
                    <MudToggleItem T="string" Value="@("sql")" Text="SQL" />
                </MudToggleGroup>
            </div>
        </div>

        @if (dataLoadStatus != null)
        {
            <MudAlert Severity="@dataLoadStatus.Value.Severity" Class="mb-4" ShowCloseIcon="true" CloseIconClicked="() => dataLoadStatus = null">
                @dataLoadStatus.Value.Message
            </MudAlert>
        }
        
        <div style="height: 350px; margin-bottom: 20px;">
            <div id="monaco-editor-container" style="height: 100%; border: 1px solid #ccc; border-radius: 4px;"></div>
        </div>

        <div class="d-flex align-center gap-4">
            <MudButton Variant="Variant.Filled" 
                       Color="Color.Primary" 
                       Size="Size.Large"
                       StartIcon="Icons.Material.Filled.PlayArrow"
                       OnClick="Run"
                       Title="Execute query (Shift+Enter)"
                       Disabled="isExecuting">
                @if (isExecuting)
                {
                    <MudProgressCircular Class="mr-2" Size="Size.Small" Indeterminate="true" />
                    <span>Executing...</span>
                }
                else
                {
                    <span>Execute @selectedMode.ToUpper() <small class="opacity-75">(Shift+Enter)</small></span>
                }
            </MudButton>

            @if (selectedMode == "kql")
            {
                <MudButton Variant="Variant.Outlined" 
                           Color="Color.Secondary"
                           StartIcon="Icons.Material.Filled.Transform"
                           OnClick="ConvertToSql"
                           Disabled="isExecuting">
                    Convert to SQL
                </MudButton>
            }

            <MudButton Variant="Variant.Text" 
                       Color="Color.Info"
                       StartIcon="Icons.Material.Filled.TableView"
                       OnClick="CheckTableExists"
                       Disabled="isExecuting">
                Show Tables
            </MudButton>
        </div>
    </MudPaper>

    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <MudAlert Severity="Severity.Error" Class="mt-4" ShowCloseIcon="true" CloseIconClicked="() => errorMessage = string.Empty">
            @errorMessage
        </MudAlert>
    }

    @if (!string.IsNullOrEmpty(conversionMessage))
    {
        <MudAlert Severity="Severity.Success" Class="mt-4" ShowCloseIcon="true" CloseIconClicked="() => conversionMessage = string.Empty">
            @conversionMessage
        </MudAlert>
    }

    @if (!string.IsNullOrEmpty(convertedSql))
    {
        <MudPaper Class="pa-4 mt-4" Elevation="2">
            <MudText Typo="Typo.h6" Class="mb-3">
                <MudIcon Icon="Icons.Material.Filled.Code" Class="mr-2" />
                Generated SQL
            </MudText>
            <MudPaper Class="pa-3" Style="background-color: var(--mud-palette-background-grey);">
                <code style="white-space: pre-wrap; font-family: 'Consolas', 'Monaco', monospace;">@convertedSql</code>
            </MudPaper>
            <div class="mt-3 d-flex gap-2">
                <MudButton Variant="Variant.Text" 
                           Color="Color.Primary"
                           StartIcon="Icons.Material.Filled.ContentCopy"
                           OnClick="() => CopyToClipboard(convertedSql)">
                    Copy SQL
                </MudButton>
                <MudButton Variant="Variant.Text" 
                           Color="Color.Secondary"
                           StartIcon="Icons.Material.Filled.SwapHoriz"
                           OnClick="UseConvertedSql">
                    Use as SQL Query
                </MudButton>
            </div>
        </MudPaper>
    }

    @if (resultData != null && resultData.Any())
    {
        <MudPaper Class="pa-4 mt-4" Elevation="2">
            <MudText Typo="Typo.h6" Class="mb-3">
                <MudIcon Icon="Icons.Material.Filled.TableChart" Class="mr-2" />
                Query Results (@resultData.Count rows)
            </MudText>
            
            <MudTable Items="@resultData" 
                      Hover="true" 
                      Striped="true" 
                      Dense="true"
                      FixedHeader="true"
                      Height="400px"
                      Elevation="0">
                <HeaderContent>
                    @if (resultData.FirstOrDefault() is Dictionary<string, object> firstRow)
                    {
                        @foreach (var column in firstRow.Keys)
                        {
                            <MudTh>@column</MudTh>
                        }
                    }
                </HeaderContent>
                <RowTemplate>
                    @if (context is Dictionary<string, object> row)
                    {
                        @foreach (var column in row.Keys)
                        {
                            <MudTd DataLabel="@column">@(row[column]?.ToString() ?? "")</MudTd>
                        }
                    }
                </RowTemplate>
            </MudTable>
        </MudPaper>
    }
    else if (!string.IsNullOrEmpty(result) && string.IsNullOrEmpty(errorMessage))
    {
        <MudPaper Class="pa-4 mt-4" Elevation="2">
            <MudText Typo="Typo.h6" Class="mb-3">
                <MudIcon Icon="Icons.Material.Filled.DataObject" Class="mr-2" />
                Raw Result
            </MudText>
            <MudPaper Class="pa-3" Style="background-color: var(--mud-palette-background-grey);">
                <code style="white-space: pre-wrap; font-family: 'Consolas', 'Monaco', monospace;">@result</code>
            </MudPaper>
        </MudPaper>
    }
</MudContainer>

@code
{
    private string result = string.Empty;
    private string errorMessage = string.Empty;
    private string conversionMessage = string.Empty;
    private string convertedSql = string.Empty;
    private bool isExecuting = false;
    private List<Dictionary<string, object>>? resultData;
    private string selectedMode = "kql";
    private (Severity Severity, string Message)? dataLoadStatus;
    private const string EditorContainerId = "monaco-editor-container";
    private DotNetObjectReference<Home>? dotnetRef;

    protected override void OnInitialized()
    {
        Console.WriteLine("🏠 Home component OnInitialized called");
        base.OnInitialized();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        Console.WriteLine($"🎯 Home component OnAfterRenderAsync - firstRender: {firstRender}");
        
        if (firstRender)
        {
            Console.WriteLine($"🎯 Home component first render - about to initialize editor");
            
            // Small delay to ensure DOM is fully rendered
            await Task.Delay(100);
            
            await InitializeEditor();
            await SetupKeyboardShortcuts();
        }
        else
        {
            Console.WriteLine($"🔄 Home component re-render (not first)");
        }
    }

    private async Task InitializeEditor()
    {
        try
        {
            Console.WriteLine($"🎯 InitializeEditor starting for container: {EditorContainerId}");
            
            // Test basic JavaScript interop first
            try
            {
                var result = await JSRuntime.InvokeAsync<string>("eval", "typeof window.nativeMonacoEditor");
                Console.WriteLine($"🔍 window.nativeMonacoEditor type: {result}");
            }
            catch (Exception ex)
            {
                Console.WriteLine($"❌ Basic JS interop test failed: {ex.Message}");
            }
            
            // Test if the ensureMonacoEditor function exists
            try
            {
                var result = await JSRuntime.InvokeAsync<string>("eval", "typeof window.ensureMonacoEditor");
                Console.WriteLine($"🔍 window.ensureMonacoEditor type: {result}");
            }
            catch (Exception ex)
            {
                Console.WriteLine($"❌ ensureMonacoEditor function check failed: {ex.Message}");
            }
            
            // Ensure the Monaco Editor exists (creates if needed, reuses if exists)
            var initResult = await JSRuntime.InvokeAsync<Dictionary<string, object>>("ensureMonacoEditor", EditorContainerId);
            
            // Safely check if success is true (handle both boolean and string types)
            bool isSuccess = false;
            if (initResult != null && initResult.ContainsKey("success"))
            {
                var successValue = initResult["success"];
                Console.WriteLine($"🔍 Success value type: {successValue?.GetType()}, value: {successValue}");
                
                if (successValue is bool boolValue)
                {
                    isSuccess = boolValue;
                    Console.WriteLine($"🔍 Parsed as boolean: {isSuccess}");
                }
                else if (successValue is string stringValue)
                {
                    isSuccess = stringValue.Equals("true", StringComparison.OrdinalIgnoreCase);
                    Console.WriteLine($"🔍 Parsed as string: {isSuccess}");
                }
                else
                {
                    // Try to convert whatever it is
                    try
                    {
                        isSuccess = Convert.ToBoolean(successValue);
                        Console.WriteLine($"🔍 Converted to boolean: {isSuccess}");
                    }
                    catch (Exception convertEx)
                    {
                        Console.WriteLine($"🔍 Failed to convert: {convertEx.Message}");
                        isSuccess = false;
                    }
                }
            }
            else
            {
                Console.WriteLine($"🔍 initResult is null or doesn't contain 'success' key");
                Console.WriteLine($"🔍 initResult: {JsonSerializer.Serialize(initResult)}");
            }
            
            if (isSuccess)
            {
                var message = (initResult?.ContainsKey("message") == true) ? initResult["message"]?.ToString() : "Editor initialized";
                Console.WriteLine($"✅ Monaco Editor initialized successfully: {message}");
            }
            else
            {
                var errorMsg = initResult?.ContainsKey("message") == true ? initResult["message"]?.ToString() : "Unknown error";
                Console.WriteLine($"❌ Editor initialization failed: {errorMsg}");
                Console.WriteLine($"🔍 Debug info - initResult: {JsonSerializer.Serialize(initResult)}");
                throw new Exception($"Editor initialization failed: {errorMsg}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"❌ Failed to initialize editor: {ex.Message}");
            Console.WriteLine($"❌ Stack trace: {ex.StackTrace}");
        }
    }

    private async Task SetupKeyboardShortcuts()
    {
        try
        {
            // Create a .NET object reference for JavaScript callbacks
            dotnetRef = DotNetObjectReference.Create(this);
            
            // Setup keyboard shortcuts in the Monaco Editor
            await JSRuntime.InvokeVoidAsync("nativeMonacoEditor.addKeyboardShortcut", 
                EditorContainerId, 
                "Shift+Enter", 
                dotnetRef, 
                "ExecuteQuery");
                
            Console.WriteLine("✅ Keyboard shortcuts setup successfully");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"❌ Failed to setup keyboard shortcuts: {ex.Message}");
        }
    }

    [JSInvokable]
    public async Task ExecuteQuery()
    {
        // Don't execute if already executing
        if (isExecuting) return;
        
        Console.WriteLine("🎹 Keyboard shortcut triggered: Shift+Enter");
        await Run();
    }

    private async Task SetKustoSchema()
    {
        try
        {
            var schema = new
            {
                Plugins = new object[0],
                Databases = new
                {
                    SampleDB = new
                    {
                        Name = "SampleDB",
                        Tables = new
                        {
                            StormEvents = new
                            {
                                Name = "StormEvents",
                                DocString = "NOAA Storm Events Database",
                                OrderedColumns = new[]
                                {
                                    new { Name = "STATE", Type = "System.String", CslType = "string" },
                                    new { Name = "EVENT_TYPE", Type = "System.String", CslType = "string" },
                                    new { Name = "YEAR", Type = "System.Int32", CslType = "int" },
                                    new { Name = "MONTH_NAME", Type = "System.String", CslType = "string" },
                                    new { Name = "BEGIN_DATE_TIME", Type = "System.DateTime", CslType = "datetime" },
                                    new { Name = "END_DATE_TIME", Type = "System.DateTime", CslType = "datetime" },
                                    new { Name = "DAMAGE_PROPERTY_NUM", Type = "System.Double", CslType = "real" },
                                    new { Name = "DAMAGE_CROPS_NUM", Type = "System.Double", CslType = "real" }
                                }
                            }
                        },
                        Functions = new { }
                    }
                }
            };

            await JSRuntime.InvokeVoidAsync("nativeMonacoEditor.setSchema", EditorContainerId, schema);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Failed to set Kusto schema: {ex.Message}");
        }
    }

    private string GetDefaultQuery()
    {
        return selectedMode == "kql" 
            ? "// Load sample data first, then try KQL queries like:\n// StormEvents | where STATE == 'TEXAS' | take 10"
            : "-- Load sample data first, then try SQL queries like:\n-- SELECT * FROM StormEvents WHERE STATE = 'TEXAS' LIMIT 10;";
    }

    private async Task CheckTableExists()
    {
        try
        {
            var tablesResult = await DuckDbInterop.QueryJsonAsync("SHOW TABLES;");
            
            if (!string.IsNullOrEmpty(tablesResult))
            {
                result = tablesResult;
                
                try
                {
                    var tableData = JsonSerializer.Deserialize<List<Dictionary<string, object>>>(tablesResult);
                    if (tableData != null && tableData.Any())
                    {
                        resultData = tableData;
                        conversionMessage = $"Found {tableData.Count} table(s) in the database.";
                    }
                    else
                    {
                        conversionMessage = "No tables found in the database. Click 'Load Sample Data' to load real NOAA data.";
                    }
                }
                catch (JsonException)
                {
                    conversionMessage = "Tables listed in raw result below.";
                }
            }
            else
            {
                conversionMessage = "No tables found in the database.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error checking tables: {ex.Message}";
        }

        StateHasChanged();
    }

    private async Task OnModeChanged(string newMode)
    {
        if (selectedMode == newMode) return;

        selectedMode = newMode;
        convertedSql = string.Empty;
        conversionMessage = string.Empty;
        
        // Get current value before switching
        var currentValue = await JSRuntime.InvokeAsync<string>("nativeMonacoEditor.getValue", EditorContainerId);
        
        // Switch the language in the editor
        var newLanguage = selectedMode == "kql" ? "kusto" : "sql";
        await JSRuntime.InvokeVoidAsync("nativeMonacoEditor.setLanguage", EditorContainerId, newLanguage);
        
        // Set the default query for the new mode if current is empty or default
        if (string.IsNullOrWhiteSpace(currentValue) || currentValue.Contains("Load sample data first"))
        {
            await JSRuntime.InvokeVoidAsync("nativeMonacoEditor.setValue", EditorContainerId, GetDefaultQuery());
        }

        StateHasChanged();
        
        // Set up Kusto schema if switching to KQL mode
        if (selectedMode == "kql")
        {
            await Task.Delay(100); // Small delay to ensure language is switched
            await SetKustoSchema();
        }
    }

    private async Task ConvertToSql()
    {
        if (selectedMode != "kql") return;

        try
        {
            var kql = await JSRuntime.InvokeAsync<string>("nativeMonacoEditor.getValue", EditorContainerId);
            if (string.IsNullOrWhiteSpace(kql))
            {
                errorMessage = "Please enter some KQL to convert.";
                return;
            }

            var converter = new KqlToSqlConverter();
            convertedSql = converter.Convert(kql);
            conversionMessage = "KQL successfully converted to SQL!";
            errorMessage = string.Empty;
        }
        catch (Exception ex)
        {
            errorMessage = $"Conversion failed: {ex.Message}";
            convertedSql = string.Empty;
        }

        StateHasChanged();
    }

    private async Task UseConvertedSql()
    {
        if (string.IsNullOrEmpty(convertedSql)) return;

        selectedMode = "sql";
        await JSRuntime.InvokeVoidAsync("nativeMonacoEditor.setLanguage", EditorContainerId, "sql");
        await JSRuntime.InvokeVoidAsync("nativeMonacoEditor.setValue", EditorContainerId, convertedSql);
        convertedSql = string.Empty;
        conversionMessage = "Converted SQL loaded into editor. You can now execute it.";
        StateHasChanged();
    }

    private async Task CopyToClipboard(string text)
    {
        try
        {
            await Task.Delay(100);
            conversionMessage = "SQL copied to clipboard!";
            StateHasChanged();
        }
        catch
        {
            errorMessage = "Failed to copy to clipboard.";
            StateHasChanged();
        }
    }

    private async Task Run()
    {
        try
        {
            isExecuting = true;
            errorMessage = string.Empty;
            conversionMessage = string.Empty;
            resultData = null;
            StateHasChanged();

            var query = await JSRuntime.InvokeAsync<string>("nativeMonacoEditor.getValue", EditorContainerId);
            if (string.IsNullOrWhiteSpace(query))
            {
                errorMessage = $"Please enter some {selectedMode.ToUpper()} to execute.";
                return;
            }

            string sqlToExecute = query;

            if (selectedMode == "kql")
            {
                try
                {
                    var converter = new KqlToSqlConverter();
                    sqlToExecute = converter.Convert(query);
                }
                catch (Exception ex)
                {
                    errorMessage = $"KQL to SQL conversion failed: {ex.Message}";
                    return;
                }
            }

            var queryResult = await DuckDbInterop.QueryJsonAsync(sqlToExecute);
            result = queryResult;

            try
            {
                var jsonData = JsonSerializer.Deserialize<List<Dictionary<string, object>>>(queryResult);
                if (jsonData != null && jsonData.Any())
                {
                    resultData = jsonData;
                }
            }
            catch (JsonException)
            {
            }
        }
        catch (Exception ex)
        {
            errorMessage = ex.Message;
        }
        finally
        {
            isExecuting = false;
            StateHasChanged();
        }
    }

    public void Dispose()
    {
        try
        {
            // Dispose the Monaco Editor when the component is disposed
            JSRuntime.InvokeVoidAsync("nativeMonacoEditor.dispose", EditorContainerId);
            
            // Dispose the .NET object reference
            dotnetRef?.Dispose();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error disposing Home component: {ex.Message}");
        }
    }
}